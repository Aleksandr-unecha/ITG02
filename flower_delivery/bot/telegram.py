import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, InputFile
from aiogram.utils.markdown import hbold, hitalic
from django.conf import settings
from asgiref.sync import sync_to_async
from orders.models import OrderItem

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

async def async_send_telegram_notification(order):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        message_text = await generate_order_message(order)
        photo_paths = await get_all_product_images(order)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        await bot.send_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=message_text,
            parse_mode=ParseMode.HTML
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∑–∞–∫–∞–∑–∞
        for photo_path in photo_paths:
            photo = FSInputFile(photo_path) if not photo_path.startswith('http') else InputFile.from_url(photo_path)
            await bot.send_photo(
                chat_id=settings.TELEGRAM_CHAT_ID,
                photo=photo,
                caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}",
                parse_mode=ParseMode.HTML
            )

    except Exception as e:
        logger.error(f"Telegram notification error: {str(e)}", exc_info=True)
        raise

@sync_to_async
def generate_order_message(order):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    items = OrderItem.objects.filter(order=order).select_related('product')

    message = [
        f"üå∏ {hbold('–ù–û–í–´–ô –ó–ê–ö–ê–ó –¶–í–ï–¢–û–í')} üå∏\n",
        f"üì¶ {hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:')}",
        f"üÜî –ù–æ–º–µ—Ä: {order.id}",
        f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}",
        f"‚è∞ –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_time.strftime('%d.%m.%Y %H:%M')}",
        f"üìç –ê–¥—Ä–µ—Å: {hitalic(order.delivery_address)}",
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {hitalic(order.comment or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n",
        f"{hbold('–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:')}"
    ]

    for item in items:
        message.append(f"‚ûñ {item.product.name} ({item.quantity} —à—Ç.) - {item.price}‚ÇΩ")

    message.append(f"\nüí∞ {hbold('–ò–¢–û–ì–û:')} {order.total_price}‚ÇΩ")
    return '\n'.join(message)

@sync_to_async
def get_all_product_images(order):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –∫–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ"""
    items = OrderItem.objects.filter(order=order).select_related('product')
    photo_paths = []
    for item in items:
        if item.product.image:
            photo_paths.append(item.product.image.path)
    return photo_paths

def send_telegram_notification(order):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(async_send_telegram_notification(order))
    except Exception as e:
        logger.error(f"Notification error: {str(e)}")
