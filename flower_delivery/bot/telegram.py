import logging
import asyncio
from typing import List, Optional
import pytz
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from django.conf import settings
from django.utils import timezone
from asgiref.sync import sync_to_async

# Models
from orders.models import Order, OrderItem
from analytics.models import DailyReport

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
@sync_to_async
def _get_order_details(order: Order) -> tuple:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î"""
    items = list(OrderItem.objects.filter(order=order).select_related('product'))
    return (
        timezone.localtime(order.created_at, MOSCOW_TZ),
        timezone.localtime(order.delivery_time, MOSCOW_TZ),
        items
    )

@sync_to_async
def _get_product_images(order: Order) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤"""
    return [
        item.product.image.path
        for item in OrderItem.objects.filter(order=order).select_related('product')
        if item.product.image
    ]

# ====== –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ======
async def _format_order_header(order: Order, is_new: bool) -> str:
    created_at, delivery_time, _ = await _get_order_details(order)
    if is_new:
        return (
            "üå∏ *–ù–û–í–´–ô –ó–ê–ö–ê–ó –¶–í–ï–¢–û–í* üå∏\n"
            "üì¶ *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
            f"üÜî *–ù–æ–º–µ—Ä:* {order.id}\n"
            f"üìÖ *–î–∞—Ç–∞:* {created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è∞ *–î–æ—Å—Ç–∞–≤–∫–∞:* {delivery_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìç *–ê–¥—Ä–µ—Å:* {order.delivery_address}\n"
            f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {order.comment or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        )
    else:
        return (
            "üå∏ *–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê* üå∏\n"
            "üì¶ *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
            f"üÜî *–ù–æ–º–µ—Ä:* {order.id}\n"
            f"üìÖ *–î–∞—Ç–∞:* {created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è∞ *–î–æ—Å—Ç–∞–≤–∫–∞:* {delivery_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìç *–ê–¥—Ä–µ—Å:* {order.delivery_address}\n"
            f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {order.comment or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        )

async def _format_order_items(order: Order) -> str:
    _, _, items = await _get_order_details(order)
    items_text = "\n".join(
        f"‚ûñ {item.product.name} ({item.quantity} —à—Ç.) - {item.price:.2f}‚ÇΩ"
        for item in items
    )
    return f"*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n{items_text}\n"

async def _format_order_footer(order: Order) -> str:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤—É total_price
    total_price = await sync_to_async(lambda: order.total_price)()
    if order.status == 'new':
        return (
            f"üí∞ *–ò–¢–û–ì–û:* {total_price:.2f}‚ÇΩ\n"
            f"üì¶ *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:* {order.get_status_display()}\n"
        )
    else:
        return (
            f"üí∞ *–ò–¢–û–ì–û:* {total_price:.2f}‚ÇΩ\n"
            f"üì¶ *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:* {order.get_status_display()}\n"
        )

# ====== –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======
async def _send_telegram_message(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.send_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)

async def _send_telegram_photo(image_path: str, caption: str = "") -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        photo = FSInputFile(image_path)
        await bot.send_photo(
            chat_id=settings.TELEGRAM_CHAT_ID,
            photo=photo,
            caption=caption,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)

# ====== –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã ======
async def handle_order_notification(order: Order, is_new: bool = True) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    try:
        header = await _format_order_header(order, is_new)
        items = await _format_order_items(order)
        footer = await _format_order_footer(order)
        message = header + items + footer

        await _send_telegram_message(message)

        image_paths = await _get_product_images(order)
        for path in image_paths:
            await _send_telegram_photo(path, f"üì∏ –¢–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ {order.id}: {str(e)}", exc_info=True)
    finally:
        await bot.session.close()

async def send_daily_report() -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        today = timezone.now().date()
        report = await sync_to_async(DailyReport.objects.filter(date=today).first)()

        if not report:
            logger.warning("–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        message = (
            "üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n"
            f"üìÖ {report.date.strftime('%d %B %Y')}\n"
            f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {report.order_count}\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {report.total_revenue:.2f}‚ÇΩ\n"
        )

        if report.order_count > 0:
            avg = report.total_revenue / report.order_count
            message += f"üèÜ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg:.2f}‚ÇΩ"

        await _send_telegram_message(message)
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
    finally:
        await bot.session.close()

# ====== –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è Celery ======
def send_order_notification(order_pk: int, is_new: bool = True) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        order = Order.objects.get(pk=order_pk)
        loop.run_until_complete(handle_order_notification(order, is_new))
    except Order.DoesNotExist:
        logger.error(f"–ó–∞–∫–∞–∑ —Å pk={order_pk} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
    finally:
        loop.close()

def trigger_daily_report() -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(send_daily_report())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
    finally:
        loop.close()
